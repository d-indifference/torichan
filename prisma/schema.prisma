generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Board {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug        String  @unique @db.VarChar(256)
  name        String  @db.VarChar(256)
  postCount   Int     @default(0)
  visible     Boolean @default(true) @db.Boolean
  description String  @db.Text

  comments      Comment[]
  boardSettings BoardSettings?
}

enum FileAttachmentMode {
  STRICT
  OPTIONAL
  FORBIDDEN
}

model BoardSettings {
  id                       String             @id @db.Uuid
  allowPosting             Boolean            @default(true) @db.Boolean
  strictAnonymity          Boolean            @default(false) @db.Boolean
  threadFileAttachmentMode FileAttachmentMode @default(OPTIONAL)
  replyFileAttachmentMode  FileAttachmentMode @default(OPTIONAL)
  delayAfterThread         Int                @default(30) @db.Integer
  delayAfterReply          Int                @default(15) @db.Integer
  minFileSize              Int                @default(1) @db.Integer
  maxFileSize              Int                @default(19922944) @db.Integer
  allowMarkdown            Boolean            @default(true) @db.Boolean
  allowTripcodes           Boolean            @default(true) @db.Boolean
  maxThreadsOnBoard        Int                @default(100) @db.Integer
  bumpLimit                Int                @default(250) @db.Integer
  maxStringFieldSize       Int                @default(100) @db.Integer
  maxCommentSize           Int                @default(2000) @db.Integer
  maxThreadLivingTime      Int                @default(86400000) @db.Integer
  defaultPosterName        String             @default("Anonymous") @db.VarChar(256)
  defaultModeratorName     String             @default("Moderator") @db.VarChar(256)
  enableCaptcha            Boolean            @default(false) @db.Boolean
  isCaptchaCaseSensitive   Boolean            @default(false) @db.Boolean
  rules                    String             @db.Text
  allowedFileTypes         Json               @default("[[\"image/apng\", \"image/avif\", \"image/gif\", \"image/jpeg\", \"image/png\", \"image/svg+xml\", \"image/webp\"]]")

  board Board @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Comment {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt     DateTime  @default(now())
  displayNumber Int
  isAdmin       Boolean   @default(false) @db.Boolean
  ip            String    @db.VarChar(64)
  name          String    @db.VarChar(256)
  tripcode      String?   @db.VarChar(256)
  options       String?   @db.VarChar(512)
  subject       String?   @db.VarChar(256)
  comment       String    @db.Text
  password      String    @db.VarChar(8)
  lastHit       DateTime?

  board   Board?  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String? @db.Uuid

  attachedFileId String?       @db.Uuid
  attachedFile   AttachedFile?

  children Comment[] @relation(name: "threadReplies")
  parent   Comment?  @relation(fields: [parentId], references: [id], name: "threadReplies", onDelete: Cascade)
  parentId String?   @db.Uuid
}

model AttachedFile {
  id              String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  path            String  @db.VarChar(512)
  size            Int
  width           Int?
  height          Int?
  mimeType        String  @db.VarChar(128)
  thumbnailPath   String? @db.VarChar(512)
  thumbnailWidth  Int?
  thumbnailHeight Int?
  isImage         Boolean @db.Boolean

  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @unique @db.Uuid
}

enum UserRole {
  ADMINISTRATOR
  MODERATOR
}

model User {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username          String   @db.VarChar(256)
  encryptedPassword String   @db.VarChar(256)
  email             String   @unique @db.VarChar(256)
  role              UserRole

  bans Ban[]
}

model Ban {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now())
  ip        String   @db.VarChar(64)
  till      DateTime
  reason    String   @db.VarChar(512)

  userId String? @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])
}
